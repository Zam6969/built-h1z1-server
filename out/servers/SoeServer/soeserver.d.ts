/// <reference types="node" />
import { EventEmitter } from "events";
import { Soeprotocol } from "h1emu-core";
import Client from "./soeclient";
import SOEClient from "./soeclient";
import { crc_length_options } from "../../types/soeserver";
export declare class SOEServer extends EventEmitter {
    _serverPort: number;
    _cryptoKey: Uint8Array;
    _protocol: Soeprotocol;
    _udpLength: number;
    _useEncryption: boolean;
    private _clients;
    private _connection;
    _crcSeed: number;
    _crcLength: crc_length_options;
    _waitQueueTimeMs: number;
    _pingTimeoutTime: number;
    _usePingTimeout: boolean;
    private readonly _maxMultiBufferSize;
    private _soeClientRoutineLoopMethod;
    private _resendTimeout;
    packetRatePerClient: number;
    private _ackTiming;
    private _routineTiming;
    _allowRawDataReception: boolean;
    constructor(serverPort: number, cryptoKey: Uint8Array, disableAntiDdos?: boolean);
    getSoeClient(soeClientId: string): SOEClient | undefined;
    private resetPacketsSent;
    private _sendPhysicalPacket;
    private sendOutQueue;
    private checkClientOutQueues;
    private soeRoutine;
    private soeClientRoutine;
    checkResendQueue(client: Client): void;
    private checkAck;
    private resetPacketsQueue;
    private setupResendForQueuedPackets;
    private sendClientWaitQueue;
    private checkOutOfOrderQueue;
    private _createClient;
    private handlePacket;
    start(crcLength?: crc_length_options, udpLength?: number): void;
    stop(): void;
    private packLogicalData;
    private createLogicalPacket;
    private _addPacketToQueue;
    private _canBeBuffered;
    private _addPacketToBuffer;
    private _sendLogicalPacket;
    sendAppData(client: Client, data: Uint8Array): void;
    sendUnbufferedAppData(client: Client, data: Uint8Array): void;
    setEncryption(client: Client, value: boolean): void;
    toggleEncryption(client: Client): void;
    deleteClient(client: SOEClient): void;
}
