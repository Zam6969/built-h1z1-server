import { BaseConstructionSaveData, ConstructionChildSaveData, ConstructionDoorSaveData, ConstructionParentSaveData, LootableConstructionSaveData, PlantingDiameterSaveData, PlantSaveData, ServerSaveData } from "types/savedata";
import { ZoneServer2016 } from "../zoneserver";
import { ZoneClient2016 as Client } from "../classes/zoneclient";
import { ConstructionEntity } from "types/zoneserver";
import { ConstructionChildEntity } from "../entities/constructionchildentity";
import { ConstructionParentEntity } from "../entities/constructionparententity";
import { LootableConstructionEntity } from "../entities/lootableconstructionentity";
import { ConstructionDoor } from "../entities/constructiondoor";
import { PlantingDiameter } from "../entities/plantingdiameter";
import { Plant } from "../entities/plant";
export declare class WorldDataManager {
    lastSaveTime: number;
    saveTimer: number;
    run(server: ZoneServer2016): void;
    initializeDatabase(server: ZoneServer2016): Promise<void>;
    insertWorld(server: ZoneServer2016): Promise<void>;
    fetchWorldData(server: ZoneServer2016): Promise<void>;
    deleteServerData(server: ZoneServer2016): Promise<void>;
    deleteCharacters(server: ZoneServer2016): Promise<void>;
    deleteWorld(server: ZoneServer2016): Promise<void>;
    saveWorld(server: ZoneServer2016): Promise<void>;
    private getBaseSaveData;
    private getBaseEntityUpdateSaveData;
    private getBaseFullEntitySaveData;
    private getWeaponSaveData;
    private getItemSaveData;
    private getLoadoutItemSaveData;
    private getLoadoutContainerSaveData;
    private getBaseFullCharacterUpdateSaveData;
    getServerData(server: ZoneServer2016): Promise<ServerSaveData | undefined>;
    private loadServerData;
    private saveServerData;
    loadCharacterData(server: ZoneServer2016, client: Client): Promise<void>;
    saveCharacterData(server: ZoneServer2016, client: Client, updateItemGuid?: boolean): Promise<void>;
    saveCharacters(server: ZoneServer2016): Promise<void>;
    private loadVehicleData;
    saveVehicles(server: ZoneServer2016): Promise<void>;
    loadConstructionDoorEntity(server: ZoneServer2016, entityData: ConstructionDoorSaveData): ConstructionDoor;
    loadLootableConstructionEntity(server: ZoneServer2016, entityData: LootableConstructionSaveData, isWorldConstruction?: boolean): LootableConstructionEntity;
    loadConstructionChildSlots(server: ZoneServer2016, parent: ConstructionChildEntity, entityData: ConstructionChildSaveData): void;
    loadConstructionChildEntity(server: ZoneServer2016, entityData: ConstructionChildSaveData): ConstructionChildEntity;
    loadConstructionParentEntity(server: ZoneServer2016, entityData: ConstructionParentSaveData): ConstructionParentEntity;
    loadConstructionData(server: ZoneServer2016): Promise<void>;
    getBaseConstructionSaveData(server: ZoneServer2016, entity: ConstructionEntity): BaseConstructionSaveData;
    getConstructionDoorSaveData(server: ZoneServer2016, entity: ConstructionDoor): ConstructionDoorSaveData;
    getLootableConstructionSaveData(server: ZoneServer2016, entity: LootableConstructionEntity): LootableConstructionSaveData;
    getConstructionChildSaveData(server: ZoneServer2016, entity: ConstructionChildEntity): ConstructionChildSaveData;
    getConstructionParentSaveData(server: ZoneServer2016, entity: ConstructionParentEntity): ConstructionParentSaveData;
    saveConstructionData(server: ZoneServer2016): Promise<void>;
    getPlantSaveData(server: ZoneServer2016, entity: Plant): PlantSaveData;
    getPlantingDiameterSaveData(server: ZoneServer2016, entity: PlantingDiameter): PlantingDiameterSaveData;
    saveCropData(server: ZoneServer2016): Promise<void>;
    loadPlant(server: ZoneServer2016, parent: PlantingDiameter, entityData: PlantSaveData): Plant;
    loadPlantingDiameter(server: ZoneServer2016, entityData: PlantingDiameterSaveData): void;
    loadCropData(server: ZoneServer2016): Promise<void>;
    saveWorldFreeplaceConstruction(server: ZoneServer2016): Promise<void>;
    loadWorldFreeplaceConstruction(server: ZoneServer2016): Promise<void>;
}
