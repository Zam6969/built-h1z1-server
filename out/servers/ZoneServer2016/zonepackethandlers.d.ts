import { ZoneClient2016 as Client } from "./classes/zoneclient";
import { ZoneServer2016 } from "./zoneserver";
import { CommandHandler } from "./commands/commandhandler";
import { VehicleCurrentMoveMode } from "types/zone2015packets";
import { GameTimeSync } from "types/zone2016packets";
export declare class zonePacketHandlers {
    commandHandler: CommandHandler;
    constructor();
    ClientIsReady(server: ZoneServer2016, client: Client, packet: any): void;
    ClientFinishedLoading(server: ZoneServer2016, client: Client, packet: any): void;
    Security(server: ZoneServer2016, client: Client, packet: any): void;
    CommandRecipeStart(server: ZoneServer2016, client: Client, packet: any): void;
    CommandSpawnVehicle(server: ZoneServer2016, client: Client, packet: any): void;
    CommandSetInWater(server: ZoneServer2016, client: Client, packet: any): void;
    CommandClearInWater(server: ZoneServer2016, client: Client, packet: any): void;
    CommandFreeInteractionNpc(server: ZoneServer2016, client: Client, packet: any): void;
    CollisionDamage(server: ZoneServer2016, client: Client, packet: any): void;
    CommandPointAndReport(server: ZoneServer2016, client: Client, packet: any): void;
    CommandReportLastDeath(server: ZoneServer2016, client: Client, packet: any): void;
    LobbyGameDefinitionDefinitionsRequest(server: ZoneServer2016, client: Client, packet: any): void;
    KeepAlive(server: ZoneServer2016, client: Client, packet: any): void;
    ClientUpdateMonitorTimeDrift(server: ZoneServer2016, client: Client, packet: any): void;
    ClientLog(server: ZoneServer2016, client: Client, packet: any): void;
    WallOfDataUIEvent(server: ZoneServer2016, client: Client, packet: any): void;
    SetLocale(server: ZoneServer2016, client: Client, packet: any): void;
    GetContinentBattleInfo(server: ZoneServer2016, client: Client, packet: any): void;
    ChatChat(server: ZoneServer2016, client: Client, packet: any): void;
    ClientInitializationDetails(server: ZoneServer2016, client: Client, packet: any): void;
    ClientLogout(server: ZoneServer2016, client: Client, packet: any): void;
    GameTimeSync(server: ZoneServer2016, client: Client, packet: {
        data: GameTimeSync;
    }): void;
    Synchronization(server: ZoneServer2016, client: Client, packet: any): void;
    CommandExecuteCommand(server: ZoneServer2016, client: Client, packet: any): void;
    CommandInteractRequest(server: ZoneServer2016, client: Client, packet: any): void;
    CommandInteractCancel(server: ZoneServer2016, client: Client, packet: any): void;
    CommandStartLogoutRequest(server: ZoneServer2016, client: Client, packet: any): void;
    CharacterSelectSessionRequest(server: ZoneServer2016, client: Client, packet: any): void;
    ProfileStatsGetPlayerProfileStats(server: ZoneServer2016, client: Client, packet: any): void;
    WallOfDataClientSystemInfo(server: ZoneServer2016, client: Client, packet: any): Promise<void>;
    DtoHitSpeedTreeReport(server: ZoneServer2016, client: Client, packet: any): void;
    GetRewardBuffInfo(server: ZoneServer2016, client: Client, packet: any): void;
    PlayerUpdateManagedPosition(server: ZoneServer2016, client: Client, packet: any): void;
    VehicleStateData(server: ZoneServer2016, client: Client, packet: any): void;
    PlayerUpdateUpdatePositionClientToZone(server: ZoneServer2016, client: Client, packet: any): void;
    CharacterRespawn(server: ZoneServer2016, client: Client, packet: any): void;
    CharacterFullCharacterDataRequest(server: ZoneServer2016, client: Client, packet: any): void;
    CommandPlayerSelect(server: ZoneServer2016, client: Client, packet: any): void;
    LockssetLock(server: ZoneServer2016, client: Client, packet: any): void;
    MountDismountRequest(server: ZoneServer2016, client: Client, packet: any): void;
    VehicleCurrentMoveMode(server: ZoneServer2016, client: Client, packet: {
        data: VehicleCurrentMoveMode;
    }): void;
    VehicleDismiss(server: ZoneServer2016, client: Client, packet: any): void;
    CommandInteractionString(server: ZoneServer2016, client: Client, packet: any): void;
    MountSeatChangeRequest(server: ZoneServer2016, client: Client, packet: any): void;
    ConstructionPlacementFinalizeRequest(server: ZoneServer2016, client: Client, packet: any): void;
    CommandItemDefinitionRequest(server: ZoneServer2016, client: Client, packet: any): void;
    CharacterWeaponStance(server: ZoneServer2016, client: Client, packet: any): void;
    FirstTimeEventInventoryAccess(server: ZoneServer2016, client: Client, packet: any): void;
    CommandSuicide(server: ZoneServer2016, client: Client, packet: any): void;
    RequestUseItem(server: ZoneServer2016, client: Client, packet: any): void;
    ConstructionPlacementRequest(server: ZoneServer2016, client: Client, packet: any): void;
    ContainerMoveItem(server: ZoneServer2016, client: Client, packet: any): void;
    LoadoutSelectSlot(server: ZoneServer2016, client: Client, packet: any): void;
    NpcFoundationPermissionsManagerEditPermission(server: ZoneServer2016, client: Client, packet: any): void;
    NpcFoundationPermissionsManagerAddPermission(server: ZoneServer2016, client: Client, packet: any): void;
    Weapon(server: ZoneServer2016, client: Client, packet: any): void;
    CommandRun(server: ZoneServer2016, client: Client, packet: any): void;
    CommandSpectate(server: ZoneServer2016, client: Client, packet: any): void;
    VoiceRadioChannel(server: ZoneServer2016, client: Client, packet: any): void;
    VoiceLeaveRadio(server: ZoneServer2016, client: Client, packet: any): void;
    EndCharacterAccess(server: ZoneServer2016, client: Client, packet: any): void;
    processPacket(server: ZoneServer2016, client: Client, packet: any): void;
    reloadCommandCache(): Promise<void>;
}
